;
; Z80-DISASSEMBLER
; 

(require 'z80-decoder)
(require 'z80-evaluator)
(require 'z80-dis-output)
(require 'z80-dis-output-std)
(require 'z80-rom)
(provide 'z80-dis)


; Disassembler evaluator.

(defstruct (z80-dis-evaluator (:include z80-evaluator))  output memory)


; Disassembler.

(defstruct z80-dis  decoder)


(defun z80-dis-table-string (s)
  (lexical-let ((s s))
    (lambda (evaluator start-address next-address)
      (let ((o (z80-dis-evaluator-output evaluator)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o s)
        (funcall (z80-dis-output-end o) o)
        next-address))))

(defun z80-dis-table-string-byte (s)
  (lexical-let ((s s))
    (lambda (evaluator start-address next-address byte)
      (let ((o (z80-dis-evaluator-output evaluator)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o s)
        (funcall (z80-dis-output-int o) o byte)
        (funcall (z80-dis-output-end o) o)
        next-address))))


(defconst z80-dis-table-registers 
  (vector "B" "C" "D" "E" "H" "L" "ILLEGAL" "A"))

(defun z80-dis-table-string-reg (s)
  (lexical-let ((s s))
    (lambda (evaluator start-address next-address reg)
      (let ((o (z80-dis-evaluator-output evaluator))
            (reg-name (aref z80-dis-table-registers reg)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o s)
        (funcall (z80-dis-output-string o) o reg-name)
        (funcall (z80-dis-output-end o) o)
        next-address))))


(defun z80-dis-table-string-bit-reg (s)
  (lexical-let ((s s))
    (lambda (evaluator start-address next-address bit reg)
      (let ((o (z80-dis-evaluator-output evaluator))
            (reg-name (aref z80-dis-table-registers reg)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o s)
        (funcall (z80-dis-output-int o) o bit)
        (funcall (z80-dis-output-string o) o ", ")
        (funcall (z80-dis-output-string o) o reg-name)
        (funcall (z80-dis-output-end o) o)
        next-address))))


(defun z80-dis-table-string-byte-disp (s)
  (lexical-let ((s s))
    (lambda (evaluator start-address next-address disp)
      (let ((o (z80-dis-evaluator-output evaluator)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o s)
        (funcall (z80-dis-output-disp o) o disp)
        (funcall (z80-dis-output-end o) o)
        next-address))))


(defun z80-dis-table-string-word (s)
  (lexical-let ((s s))
    (lambda (evaluator start-address next-address word)
      (let ((o (z80-dis-evaluator-output evaluator)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o s)
        (funcall (z80-dis-output-int o) o word)
        (funcall (z80-dis-output-end o) o)
        next-address))))


(defun z80-dis-table-string-word-addr (s)
  (lexical-let ((s s))
    (lambda (evaluator start-address next-address word)
      (let ((o (z80-dis-evaluator-output evaluator)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o s)
        (funcall (z80-dis-output-address o) o word)
        (funcall (z80-dis-output-end o) o)
        next-address))))


(defun z80-dis-table-string-word-string (before after)
  (lexical-let ((before before) (after after))
    (lambda (evaluator start-address next-address word)
      (let ((o (z80-dis-evaluator-output evaluator)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o before)
        (funcall (z80-dis-output-int o) o word)
        (funcall (z80-dis-output-string o) o after)
        (funcall (z80-dis-output-end o) o)
        next-address))))


(defun z80-dis-table-string-byte-string (before after)
  (lexical-let ((before before) (after after))
    (lambda (evaluator start-address next-address byte)
      (let ((o (z80-dis-evaluator-output evaluator)))
        (funcall (z80-dis-output-start o) o)
        (funcall (z80-dis-output-start-address o) o start-address)
        (funcall (z80-dis-output-end-address o) o next-address)
        (funcall (z80-dis-output-string o) o before)
        (funcall (z80-dis-output-int o) o byte)
        (funcall (z80-dis-output-string o) o after)
        (funcall (z80-dis-output-end o) o)
        next-address))))



(defun z80-dis-evaluator (m o)
  "Make a Z80-DIS-EVALUATOR given a Z80-MEMORY and an Z80-DIS-OUTPUT."
  (make-z80-dis-evaluator  :memory m  :output o
   :illegal     (z80-dis-table-string "ILLEGAL")                           
   :nop         (z80-dis-table-string "NOP")
   :ld-bc-imm   (z80-dis-table-string-word "LD	BC, ")
   :ld-bc-a     (z80-dis-table-string "LD	(BC), A")
   :inc-bc      (z80-dis-table-string "INC	BC")
   :inc-b       (z80-dis-table-string "INC	B")
   :dec-b       (z80-dis-table-string "DEC	B")
   :ld-b-imm    (z80-dis-table-string-byte "LD	B, ")
   :rcla        (z80-dis-table-string "RCLA")

   :ex-af       (z80-dis-table-string "EX	AF, AF'")
   :add-hl-bc   (z80-dis-table-string "ADD	HL, BC")
   :ld-a-bc     (z80-dis-table-string "LD	A, (BC)")
   :dec-bc      (z80-dis-table-string "DEC	BC")
   :inc-c       (z80-dis-table-string "INC	C")
   :dec-c       (z80-dis-table-string "DEC	C")
   :ld-c-imm    (z80-dis-table-string-byte "LD	C, ")
   :rrca        (z80-dis-table-string "RRCA")

   :djnz        (z80-dis-table-string-byte-disp "DJNZ	")
   :ld-de-imm   (z80-dis-table-string-word "LD	DE, ")
   :ld-de-a     (z80-dis-table-string "LD	(DE), A")
   :inc-de      (z80-dis-table-string "INC	DE")
   :inc-d       (z80-dis-table-string "INC	D")
   :dec-d       (z80-dis-table-string "DEC	D")
   :ld-d-imm    (z80-dis-table-string-byte "LD	D, ")
   :rla         (z80-dis-table-string "RLA")

   :jr          (z80-dis-table-string-byte-disp "JR	")
   :add-hl-de   (z80-dis-table-string "ADD	HL, DE")
   :ld-a-de     (z80-dis-table-string "LD	A, (DE)")
   :dec-de      (z80-dis-table-string "DEC	DE")
   :inc-e       (z80-dis-table-string "INC	E")
   :dec-e       (z80-dis-table-string "DEC	E")
   :ld-e-imm    (z80-dis-table-string-byte "LD	E, ")
   :rra         (z80-dis-table-string "RRA")

   :jr-nz       (z80-dis-table-string-byte-disp "JR	NZ, ")
   :ld-hl-imm   (z80-dis-table-string-word "LD	HL, ")
   :st-hl       (z80-dis-table-string-word-string "LD	(" "), HL")
   :inc-hl      (z80-dis-table-string "INC	HL")
   :inc-h       (z80-dis-table-string "INC	H")
   :dec-h       (z80-dis-table-string "DEC	H")
   :ld-h-imm    (z80-dis-table-string-byte "LD	H, ")
   :daa         (z80-dis-table-string "DAA")

   :jr-z        (z80-dis-table-string-byte-disp "JR	Z, ")
   :add-hl-hl   (z80-dis-table-string "ADD	HL, HL")
   :ld-hl-addr  (z80-dis-table-string-word-string "LD	HL, (" ")")
   :dec-hl      (z80-dis-table-string "DEC	HL")
   :inc-l       (z80-dis-table-string "INC	L")
   :dec-l       (z80-dis-table-string "DEC	L")
   :ld-l-imm    (z80-dis-table-string-byte "LD	L, ")
   :cpl         (z80-dis-table-string "CPL")

   :jr-nc       (z80-dis-table-string-byte-disp "JR	NC, ")
   :ld-sp-imm   (z80-dis-table-string-word "LD	SP, ")
   :st-a        (z80-dis-table-string-word-string "LD	(" "), A")
   :inc-sp      (z80-dis-table-string "INC	SP")
   :inc-hl-addr (z80-dis-table-string "INC	(HL)")
   :dec-hl-addr (z80-dis-table-string "DEC	(HL)")
   :st-hl-imm   (z80-dis-table-string-byte "LD	(HL), ")
   :scf         (z80-dis-table-string "SCF")

   :jr-c        (z80-dis-table-string-byte-disp "JR	NC, ")
   :add-hl-sp   (z80-dis-table-string "ADD	HL, SP")
   :ld-a-addr   (z80-dis-table-string-word-string "LD	A, (" ")")
   :dec-sp      (z80-dis-table-string "DEC	SP")
   :inc-a       (z80-dis-table-string "INC	A")
   :dec-a       (z80-dis-table-string "DEC	A")
   :ld-a-imm    (z80-dis-table-string-byte "LD	A, ")
   :ccf         (z80-dis-table-string "CCF")

   :ld-b-reg    (z80-dis-table-string-reg "LD	B, ")
   :ld-b-hl     (z80-dis-table-string "LD	B, (HL)")
   :ld-c-reg    (z80-dis-table-string-reg "LD	 C, ")
   :ld-c-hl     (z80-dis-table-string "LD	C, (HL)")
   :ld-d-reg    (z80-dis-table-string-reg "LD	D, ")
   :ld-d-hl     (z80-dis-table-string "LD	D, (HL)")
   :ld-e-reg    (z80-dis-table-string-reg "LD	E, ")
   :ld-e-hl     (z80-dis-table-string "LD	E, (HL)")
   :ld-h-reg    (z80-dis-table-string-reg "LD	H, ")
   :ld-h-hl     (z80-dis-table-string "LD	H, (HL)")
   :ld-l-reg    (z80-dis-table-string-reg "LD	L, ")
   :ld-l-hl     (z80-dis-table-string "LD	L, (HL)")
   :st-hl-reg   (z80-dis-table-string-reg "LD	(HL), ")
   :halt        (z80-dis-table-string "HALT")
   :ld-a-reg    (z80-dis-table-string-reg "LD	A, ")
   :ld-a-hl     (z80-dis-table-string "LD	A, (HL)")
   :add-a-reg   (z80-dis-table-string-reg "ADD	A, ")
   :add-a-hl    (z80-dis-table-string "ADD	A, (HL)")
   :adc-a-reg   (z80-dis-table-string-reg "ADC	A, ")
   :adc-a-hl    (z80-dis-table-string "ADC	A, (HL)")
   :sub-a-reg   (z80-dis-table-string-reg "SUB	A, ")
   :sub-a-hl    (z80-dis-table-string "SUB	A, (HL)")
   :sbc-a-reg   (z80-dis-table-string-reg "SBC	A, ")
   :sbc-a-hl    (z80-dis-table-string "SBC	A, (HL)")
   :and-reg     (z80-dis-table-string-reg "AND	")
   :and-hl      (z80-dis-table-string "AND	(HL)")
   :xor-reg     (z80-dis-table-string-reg "XOR	")
   :xor-hl      (z80-dis-table-string "XOR	(HL)")
   :or-reg      (z80-dis-table-string-reg "OR	")
   :or-hl       (z80-dis-table-string "OR	(HL)")
   :cp-reg      (z80-dis-table-string-reg "CP	")
   :cp-hl       (z80-dis-table-string "CP	(HL)")

   :ret-nz      (z80-dis-table-string "RET	NZ")
   :pop-bc      (z80-dis-table-string "POP	BC")
   :jp-nz       (z80-dis-table-string-word-addr "JP	NZ, ")
   :jp          (z80-dis-table-string-word-addr "JP	")
   :call-nz     (z80-dis-table-string-word-addr "CALL	NZ, ")
   :push-bc     (z80-dis-table-string "PUSH	BC")
   :add-a-imm   (z80-dis-table-string-byte "ADD	A, ")
   :rst-00      (z80-dis-table-string "RST	00")

   :ret-z       (z80-dis-table-string "RET	Z")
   :ret         (z80-dis-table-string "RET")
   :jp-z        (z80-dis-table-string-word-addr "JP	NZ, ")

   :rlc-reg     (z80-dis-table-string-reg "RLC	")
   :rlc-hl      (z80-dis-table-string "RLC	(HL)")
   :rrc-reg     (z80-dis-table-string-reg "RRC	")
   :rrc-hl      (z80-dis-table-string "RRC	(HL)")
   :rl-reg      (z80-dis-table-string-reg "RL	")
   :rl-hl       (z80-dis-table-string "RL	(HL)")
   :rr-reg      (z80-dis-table-string-reg "RR	")
   :rr-hl       (z80-dis-table-string "RR	(HL)")
   :sla-reg     (z80-dis-table-string-reg "SLA	")
   :sla-hl      (z80-dis-table-string "SLA	(HL)")
   :sra-reg     (z80-dis-table-string-reg "SRA	")
   :sra-hl      (z80-dis-table-string "SRA	(HL)")
   :srl-reg     (z80-dis-table-string-reg "SRL	")
   :srl-hl      (z80-dis-table-string "SRL	(HL)")
   :bit-reg     (z80-dis-table-string-bit-reg "BIT	")
   :bit-hl      (z80-dis-table-string-byte-string "BIT	" ", (HL)")
   :res-reg     (z80-dis-table-string-bit-reg "RES	")
   :res-hl      (z80-dis-table-string-byte-string "RES	" ", (HL)")
   :set-reg     (z80-dis-table-string-bit-reg "SET	")
   :set-hl      (z80-dis-table-string-byte-string "SET	" ", (HL)")

   :call-z      (z80-dis-table-string-word-addr "CALL	NZ, ")
   :call        (z80-dis-table-string-word-addr "CALL	")
   :adc-imm     (z80-dis-table-string-byte "ADC	A, ")
   :rst-08      (z80-dis-table-string "RST	08")
   :ret-nc      (z80-dis-table-string "RET	NC")
   :pop-de      (z80-dis-table-string "POP	DE")
   :jp-nc       (z80-dis-table-string-word-addr "JP	NC, ")
   :out-a       (z80-dis-table-string-byte-string "OUT	(" "), A")

   :call-nc     (z80-dis-table-string-word-addr "CALL	NC, ")
   :push-de     (z80-dis-table-string "PUSH	DE")
   :sub-imm     (z80-dis-table-string-byte "SUB	")
   :rst-10      (z80-dis-table-string "RST	10")
   :ret-c       (z80-dis-table-string "RET	C")
   :exx         (z80-dis-table-string "EXX")
   :jp-c        (z80-dis-table-string-word-addr "JP	C, ")
   :in-a        (z80-dis-table-string-byte-string "IN	A, (" ")")

   :call-c      (z80-dis-table-string-word-addr "CALL	C, ")

   :ld-ix-imm   (z80-dis-table-string-word "LD	IX, ")
   :st-ix       (z80-dis-table-string-word-string "LD	(" "), IX")
   :inc-ix      (z80-dis-table-string "INC	IX")
   :ld-ix-addr  (z80-dis-table-string-word-string "LD	IX, (" ")")
   :dec-ix      (z80-dis-table-string "DEC	IX")

   :inc-ix-disp (z80-dis-table-string-byte-string "INC	(IX+" ")")
   :dec-ix-disp (z80-dis-table-string-byte-string "DEC	(IX+" ")")
   :add-a-ix-disp (z80-dis-table-string-byte-string "ADD	A, (IX+" ")")
   :adc-a-ix-disp (z80-dis-table-string-byte-string "ADC	A, (IX+" ")")
   :sub-ix-disp (z80-dis-table-string-byte-string "SUB	(IX+" ")")
   :sbc-ix-disp (z80-dis-table-string-byte-string "SBC	(IX+" ")")
   :and-ix-disp (z80-dis-table-string-byte-string "AND	(IX+" ")")
   :xor-ix-disp (z80-dis-table-string-byte-string "XOR	(IX+" ")")
   :or-ix-disp  (z80-dis-table-string-byte-string "OR	(IX+" ")")
   :cp-ix-disp  (z80-dis-table-string-byte-string "CP	(IX+" ")")
   :pop-ix     (z80-dis-table-string "POP	IX")
   :ex-sp-ix   (z80-dis-table-string "EX	(SP), IX")
   :push-ix    (z80-dis-table-string "PUSH	IX")
   :jp-ix      (z80-dis-table-string "JP	(IX)")
   :ld-sp-ix   (z80-dis-table-string "LD	SP, IX")

   :sbc-imm     (z80-dis-table-string-byte "SBC	")
   :rst-18      (z80-dis-table-string "RST	18")

   :ret-po      (z80-dis-table-string "RET	PO")
   :pop-hl      (z80-dis-table-string "POP	HL")
   :jp-po       (z80-dis-table-string-word-addr "JP	PO, ")
   :ex-sp-hl    (z80-dis-table-string "EX	SP, HL")
   :call-po     (z80-dis-table-string-word-addr "CALL	PO, ")
   :push-hl     (z80-dis-table-string "PUSH	HL")
   :and-imm     (z80-dis-table-string-byte "AND	")
   :rst-20      (z80-dis-table-string "RST	20")

   :ret-pe      (z80-dis-table-string "RET	PE")
   :jp-hl       (z80-dis-table-string "JP	(HL)")
   :jp-pe       (z80-dis-table-string-word-addr "JP	PE, ")
   :ex-de-hl    (z80-dis-table-string "EX	DE, HL")
   :call-pe     (z80-dis-table-string-word-addr "CALL	PE, ")

   :neg         (z80-dis-table-string "NEG")
   :retn        (z80-dis-table-string "RETN")
   :ld-i-a      (z80-dis-table-string "LD	I, A")
   :reti        (z80-dis-table-string "RETI")
   :ld-r-a      (z80-dis-table-string "LD	R, A")
   :ld-a-i      (z80-dis-table-string "LD	A, I")
   :ld-a-r      (z80-dis-table-string "LD	A, R")
   :rrd         (z80-dis-table-string "RRD")
   :rld         (z80-dis-table-string "RLD")
   :ldi         (z80-dis-table-string "LDI")
   :cpi         (z80-dis-table-string "CPI")
   :ini         (z80-dis-table-string "INI")
   :outi        (z80-dis-table-string "OUTI")
   :ldd         (z80-dis-table-string "LDD")
   :cpd         (z80-dis-table-string "CPD")
   :ind         (z80-dis-table-string "IND")
   :outd        (z80-dis-table-string "OUTD")
   :ldir        (z80-dis-table-string "LDIR")
   :cpir        (z80-dis-table-string "CPIR")
   :inir        (z80-dis-table-string "INIR")
   :otir        (z80-dis-table-string "OTIR")
   :lddr        (z80-dis-table-string "LDDR")
   :cpdr        (z80-dis-table-string "CPDR")
   :indr        (z80-dis-table-string "INDR")
   :otdr        (z80-dis-table-string "OTDR")

   :xor-imm     (z80-dis-table-string-byte "XOR ")
   :rst-28      (z80-dis-table-string "RST      28")
   :ret-p       (z80-dis-table-string "RET      P")
   :pop-af      (z80-dis-table-string "POP      AF")
   :jp-p        (z80-dis-table-string-word-addr "JP     P, ")
   :di          (z80-dis-table-string "DI")
   :call-p      (z80-dis-table-string-word-addr "CALL   P, ")
   :push-af     (z80-dis-table-string "PUSH     AF")

   :or-imm     (z80-dis-table-string-byte "OR   ")
   :rst-30     (z80-dis-table-string "RST       30")
   :ret-m      (z80-dis-table-string "RET       M")
   :ld-sp-hl   (z80-dis-table-string "LD        SP, HL")
   :jp-m       (z80-dis-table-string-word-addr "JP      M, ")
   :ei         (z80-dis-table-string "EI")
   :call-m     (z80-dis-table-string-word-addr "CALL    M, ")
; @@@@ one here
   :ld-iy-imm  (z80-dis-table-string-word "LD   IY, ")
   :st-iy      (z80-dis-table-string-word-string "LD    (" ", IY")
   :inc-iy     (z80-dis-table-string "INC       IY")
   :ld-iy-addr (z80-dis-table-string-word-string "LD    IY, (" ")")
   :dec-iy     (z80-dis-table-string "DEC       IY")
   :inc-iy-disp (z80-dis-table-string-byte-string "INC	(IY+" ")")
   :dec-iy-disp (z80-dis-table-string-byte-string "DEC	(IY+" ")")
   :add-a-iy-disp (z80-dis-table-string-byte-string "ADD	A, (IY+" ")")
   :adc-a-iy-disp (z80-dis-table-string-byte-string "ADC	A, (IY+" ")")
   :sub-iy-disp (z80-dis-table-string-byte-string "SUB	(IY+" ")")
   :sbc-iy-disp (z80-dis-table-string-byte-string "SBC	(IY+" ")")
   :and-iy-disp (z80-dis-table-string-byte-string "AND	(IY+" ")")
   :xor-iy-disp (z80-dis-table-string-byte-string "XOR	(IY+" ")")
   :or-iy-disp  (z80-dis-table-string-byte-string "OR	(IY+" ")")
   :cp-iy-disp  (z80-dis-table-string-byte-string "CP	(IY+" ")")
; @@@@ stuff here
   :pop-iy     (z80-dis-table-string "POP       IY")
   :ex-sp-iy   (z80-dis-table-string "EX        (SP), IY")
   :push-iy    (z80-dis-table-string "PUSH      IY")
   :jp-iy      (z80-dis-table-string "JP        (IY)")
   :ld-sp-iy   (z80-dis-table-string "LD        SP, IY")
   :cp-imm     (z80-dis-table-string-byte "CP   ")
   :rst-38     (z80-dis-table-string "RST       38")))


(defun z80-dis-from-memory (m o)
  "Make a Z80-DIS out of a Z80-MEMORY."
  (let* ((evaluator (z80-dis-evaluator m o))
         (decoder (make-z80-decoder :memory m :evaluator evaluator)))
    (make-z80-dis :decoder decoder)))

(defun z80-dis-from-file (file-name)
  "Open FILE-NAME as a Z80-MEMORY create a Z80-DIS on it dump the disassembly to the standard output."
  (let* ((input-buffer (find-file-literally file-name))
         (rom (z80-rom-from-buffer input-buffer))
         (output (z80-dis-output-std rom)))
    (z80-dis-from-memory rom output)))

(defun z80-dis (dis address n)
  "Disassemble using Z80-DIS starting at ADDRESS and stop after N instructions"
  (let ((decoder (z80-dis-decoder dis)))
    (while (not (zerop n))
      (setq address (z80-decode decoder address))
      (setq n (- n 1)))))
